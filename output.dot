digraph G {
	0 [label="program"];
	0 -> 1;
	1 [label="include"];
	1 -> 2;
	2 [label="TERM: '#include'"];
	1 -> 3;
	3 [label="TERM: '<stdio.h>'"];
	0 -> 4;
	4 [label="func_def"];
	4 -> 5;
	5 [label="types"];
	5 -> 6;
	6 [label="type_int"];
	6 -> 7;
	7 [label="TERM: 'int'"];
	4 -> 8;
	8 [label="id_with_ptr"];
	8 -> 9;
	9 [label="identifier"];
	9 -> 10;
	10 [label="TERM: 'func'"];
	4 -> 11;
	11 [label="TERM: '('"];
	4 -> 12;
	12 [label="TERM: ')'"];
	4 -> 13;
	13 [label="compound_statement"];
	13 -> 14;
	14 [label="TERM: '{'"];
	13 -> 15;
	15 [label="block_item"];
	15 -> 16;
	16 [label="declaration"];
	16 -> 17;
	17 [label="types"];
	17 -> 18;
	18 [label="type_int"];
	18 -> 19;
	19 [label="TERM: 'int'"];
	16 -> 20;
	20 [label="init_decltr_list"];
	20 -> 21;
	21 [label="declarator"];
	21 -> 22;
	22 [label="var_decltr"];
	22 -> 23;
	23 [label="id_with_ptr"];
	23 -> 24;
	24 [label="identifier"];
	24 -> 25;
	25 [label="TERM: 'i'"];
	22 -> 26;
	26 [label="TERM: '='"];
	22 -> 27;
	27 [label="expression"];
	27 -> 28;
	28 [label="assignment_expr"];
	28 -> 29;
	29 [label="cond_expr"];
	29 -> 30;
	30 [label="logical_or_expr"];
	30 -> 31;
	31 [label="logical_and_expr"];
	31 -> 32;
	32 [label="equality_expr"];
	32 -> 33;
	33 [label="relational_expr"];
	33 -> 34;
	34 [label="additive_expr"];
	34 -> 35;
	35 [label="multiplicative_expr"];
	35 -> 36;
	36 [label="cast_expr"];
	36 -> 37;
	37 [label="unary_expr"];
	37 -> 38;
	38 [label="postfix_expr"];
	38 -> 39;
	39 [label="prim_expr"];
	39 -> 40;
	40 [label="constant"];
	40 -> 41;
	41 [label="float_constant"];
	41 -> 42;
	42 [label="TERM: '0.0'"];
	16 -> 43;
	43 [label="TERM: ';'"];
	13 -> 44;
	44 [label="block_item"];
	44 -> 45;
	45 [label="statement"];
	45 -> 46;
	46 [label="expression_statement"];
	46 -> 47;
	47 [label="expression"];
	47 -> 48;
	48 [label="assignment_expr"];
	48 -> 49;
	49 [label="cond_expr"];
	49 -> 50;
	50 [label="logical_or_expr"];
	50 -> 51;
	51 [label="logical_and_expr"];
	51 -> 52;
	52 [label="equality_expr"];
	52 -> 53;
	53 [label="relational_expr"];
	53 -> 54;
	54 [label="additive_expr"];
	54 -> 55;
	55 [label="multiplicative_expr"];
	55 -> 56;
	56 [label="cast_expr"];
	56 -> 57;
	57 [label="unary_expr"];
	57 -> 58;
	58 [label="postfix_expr"];
	58 -> 59;
	59 [label="postfix_expr"];
	59 -> 60;
	60 [label="prim_expr"];
	60 -> 61;
	61 [label="identifier"];
	61 -> 62;
	62 [label="TERM: 'i'"];
	58 -> 63;
	63 [label="TERM: '++'"];
	46 -> 64;
	64 [label="TERM: ';'"];
	13 -> 65;
	65 [label="TERM: '}'"];
	0 -> 66;
	66 [label="TERM: '<EOF>'"];
}
